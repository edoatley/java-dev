name: Local Docker Build
description: Locally build and tags the docker image

inputs:
  image:
    description: 'What to tag image with'
    required: true
  context:
    description: 'Docker file / app location'
    required: true
  java-version:
    description: 'Version of JDK to setup'
    required: true
    default: '21'
  gradle-version:
    description: 'Version of Gradle to setup'
    required: false
    default: 'current'
  hostname:
    description: 'Hostanme to use in integration tests'
    required: false
    default: 'integration.restapi.edoatley.com'
  key-store:
    description: 'Path to keystore file (relative to docker context)'
    required: false
    default: 'src/itest/resources/itest-keystore.jks'
  key-store-password:
    secret: true
    description: 'Password for keystore'
    required: false
    default: 'itest'

runs:
  using: 'composite'
  steps:
  - name: Set up QEMU
    uses: docker/setup-qemu-action@v3

  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v3

  - name: Docker Build
    uses: docker/build-push-action@v5
    with:
      context: '${{ inputs.context }}'
      push: false
      load: true
      tags: '${{ inputs.image }}'

  - name: Find Free Port
    id: port
    run: |
      BASE_PORT=1234
      INCREMENT=1
      port=$BASE_PORT

      while [ -n "$(ss -tan4H "sport = $port")" ]; do
        port=$((port+INCREMENT))
      done
      echo "free_port=$port"
      echo "free_port=$port" >> $GITHUB_OUTPUT
    shell: bash

  - name: Print integration tests action
    run: cat .github/actions/integration-tests/action.yml

  - name: Run App as a docker image
    working-directory: ${{ inputs.context }}
    run: |
      docker run -d \
        -p ${{ steps.port.outputs.free_port }}:8443 \
        --mount type=bind,source="$(pwd)/${{inputs.key-store}}",target=/home/app/tls/keystore.jks,readonly \
        --env SERVER_KEYSTORE_PASSWORD=${{inputs.key-store-password}} \
        --name restapi ${{ inputs.image }}
    shell: bash

  - name: Run integration test
    working-directory: ${{ inputs.context }}
    env:
      SERVER_PORT: ${{ steps.port.outputs.free_port }}
      SERVER_KEYSTORE: ${{inputs.key-store}}
      SERVER_KEYSTORE_PASSWORD: ${{inputs.key-store-password}}
      SERVER_HOSTNAME: ${{inputs.hostname}}
    run: |
      gradle integrationTest
    shell: bash

  - name: Stop Running Docker Image
    run: |
      docker stop restapi
    shell: bash

  - name: Publish Test Report
    uses: mikepenz/action-junit-report@v4
    if: success() || failure() # always run even if the previous step fails
    with:
      report_paths: '**/build/test-results/itest/TEST-*.xml'
