plugins {
        id 'groovy'
        id 'java'
        id 'application'
        id 'com.github.johnrengelman.shadow' version '8.1.1'
        id 'com.softeq.gradle.itest' version '1.0.4'
}

project.ext {
    versions = [
        jetty : '12.0.7',
        jersey : '3.1.5'
    ]
}

mainClassName = 'uk.org.edoatley.App'

repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
}

dependencies {

        // Eclipse Jetty - provides a web server and servlet container. 
        // Note that since v12 artifacts that are EE specific are now isolated in their own EE specific layer.
        // This is why we have the ee10 servlet BoM and the jetty cory BoM
        implementation platform("org.eclipse.jetty:jetty-bom:$versions.jetty")
        implementation 'org.eclipse.jetty:jetty-server'
        implementation platform("org.eclipse.jetty.ee10:jetty-ee10-bom:$versions.jetty")
        implementation "org.eclipse.jetty.ee10:jetty-ee10-servlet"

        // Eclipse Jersey - a REST framework that provides a JAX-RS (JSR-370) implementation
        implementation platform("org.glassfish.jersey:jersey-bom:$versions.jersey")
        implementation "org.glassfish.jersey.containers:jersey-container-servlet-core"
        implementation "org.glassfish.jersey.containers:jersey-container-jetty-http"
        implementation "org.glassfish.jersey.media:jersey-media-json-jackson"
        implementation "org.glassfish.jersey.inject:jersey-hk2"

        // Note below we use the libs. Gradle Version Catalog syntax - see gradle/libs.versions.toml for the details
        
        // add slf4j and log4j
        implementation libs.bundles.logging 

        // add test dependencies
        testImplementation libs.junit.jupiter
        testImplementation libs.bundles.logging 
        testImplementation libs.bundles.testLibs

}

// have the itest dependencies match the test source set
sourceSets {
    itest {
        compileClasspath += sourceSets.test.output
        runtimeClasspath += sourceSets.test.output
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(Test) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging { 
        showStandardStreams = true
        exceptionFormat "full"
        minGranularity = 3
    }
}